# 概要
Django 是用 Python 开发的一个免费开源的 Web 框架，几乎囊括了 Web 应用的方方面面，可以用于快速搭建高性能、优雅的网站。

Django 提供了许多网站后台开发经常用到的模块，使开发者能够专注于业务部分

# MTV和MVC
Web 开发领域还有另外一个非常著名的设计模式——MVC（Modle-View-Controller）

Django 的设计模式，也就是 MTV（Modle-Template-View），在 Django 是有 Controller 层的，只不过它由框架本身来实现，所以我们不用关心它

 
 
# ORM
Object Realtional Mapping（对象关系映射），基于关系型数据库的程序技术。

ORM**使用类和对象来操作关系型数据库（MySql、Oracle等）**，避免了直接使用sql语句，底层用映射机制实现的（到一定水平我再去看看）

映射机制：
+ 把**类**映射为数据库中的**表**
+ 把**类的实例**映射为数据库的**表的数据行**
+ 把**类的属性**映射为数据库的**表的字段**


**表模型**为Model，继承自`django.db.models`的`Model`类，所有和表相关的操作，都是继承这个类
**字段类型**用类似xxxField来描述

Django提供了基本的CURD（增删改查）和其他API来对数据库表进行操作



# auth模块
Django提供的 auth 模块能够快速的实现用户模块的基本功能
+ 实现并维护了用户与用户组的增加、删除、更改功能；
+ 实现了用户权限与用户组权限的增加、删除、更改；
+ 实现了可以自定义用户权限与用户组权限功能。
+ 还提供了权限验证等功能以及一些常用的方法


# Admin后台管理系统
让不懂编程的人也能快速上手维护后台，配置人员权限




# 视图函数（View）
+ 在 Django 中，视图函数是一个 Python 函数或者类
+ 视图函数首先接受来自浏览器或者客户端的请求，并最终返回响应

```python
from django.http import HttpResponse
def Hello_my_django(request):
    return HttpResponse('<html><body>Hello my Django</body></html>')
```
从以上我们可以了解**视图函数工作的关键三点：**
+ HttpResponse，是一种**视图响应**的类型
+ request，Django 规定了，**视图函数至少有一个参数**，第一个参数必须是 `request`
+ return，**视图函数要返回响应内容**，这里的响应内容是我们用 HTML 标签编写的，把它作为 HttpResponse 的对象返回给浏览器


# 模板系统（Template）
从上一小节代码中，可以看到竟然将html的代码放到了程序里，势必会有高度耦合、难以维护的隐患，而**模板系统就是将视图函数和html代码解耦的**


在tamplates文件夹（一个项目同级目录，Django会自动识别）下新建hello.html，编写如下代码：
```html
<html><body>{{vaule}}</body></html>
```
**视图函数调用模板，并进行“模板传参”**
```python
from django.shortcuts import render      
def hello_my_django(request):
    return render(request,"hello.html",{"vaule":"hello my Django"})
```
另一种是`render`方法，封装在`django.shortcuts`中，也很方便
