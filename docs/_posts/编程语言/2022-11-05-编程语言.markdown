# 编程语言



## 普通函数和虚函数的区别--解释多态等现象

实质上是一个**函数调用**上的问题，其它的一些编程特性都可以由此解释，比如运行时多态与静态多态、抽象函数、抽象类、接口、重载等等、

## 编译期

**类**在编译时就已经**静态生成**了普通函数的地址，但没有生成虚函数的地址，一样的是，都**不会**在编译时生成类中**实例数据**的地址-->类的实列对象**不分配内存**都能**访问普通**类函数

（猜想：可能普通函数生成函数地址时，跟**参数列表**、函数名有关，所以重载时要改参数列表，调用时要识别参数列表）

如果猜想成立，那么编译期间是**无法确定虚函数的函数地址**的，但是会（给每个类）生成**虚函数列表**，其中保存**类对象进行声明的**虚函数地址



## 运行时的调用

从**汇编**执行步骤可以看出，调用**普通函数**时，是通过**类的实例的this指针**（本质是个参数）从**全局内存区**中调用的，其函数地址在编译期间就确定了，实现“静态”多态，



调用**虚函数**时，是要**去看实例对象的类**是什么，然后**查找该类的虚函数表**，查找符合条件的虚函数并调用执行。保存虚函数地址表（数组）也是要占用类对象空间的，所以未给对象分派内存是访问不了虚函数的。



## 抽象函数

c++里抽象类指至少包含一个抽象函数的类，不能被实例化。抽象函数只能被重写，才能实现功能。又由于c++父类指针可以指向子类，也算某种意义的可以实例化（自我猜想而已，未证实）。所以，可以实现**接口**的效果，即面向群体不知道具体细节，只知道抽象类里能提供哪些函数而已。



## 抽象函数与虚函数

前者，为了封装接口；后者，为了重写函数（多态）。