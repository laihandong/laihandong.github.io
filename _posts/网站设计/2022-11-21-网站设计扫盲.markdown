---
layout: post
title:  "网站设计扫盲"
date:   2022-11-27 20:30:00 +0800
permalink: blog/网站设计/网站设计扫盲.html
typora-root-url: ../../
author: handong
tag1: 网站设计
---



接下来会调研一下想做个自己的网站，可能会用到的技术方案，比如服务器、前后端框架、编程语言等等

我目前对网站设计的所有认知：
+ 网站是一系列网页，别人通过浏览器访问，在你的网页引导下浏览具体信息
+ 网站能展示的内容都是存储在服务器上的，需要一个web服务器来管理这些内容
+ web服务器可以分成web服务、器来讨论，前者是一个程序，后者是一个物理机（主要为web服务所用）。提供web服务的机器？
+ 这个提供web服务的机器，可以是自己个人电脑，也可以租赁别人提供的电脑，通过远程连接操控来编写内容，部署服务等等。
+ 网页内容的设计有三要素，html+css+javascript，分别是原生内容+页面布局+人机交互
+ 网站除了可以展示原生内容，也可以收集、展示、处理在人机交互中产生的衍生数据，这个就是服务端（后端）需要去处理的事情了
+ 常用的后端语言，属php最为广泛，java、python等也都有应用场景，视情况而定。其中JavaScript前后端嵌入式通吃！
+ 似乎很多的编程语言都能通吃前后端？不是。语言被设计出来的时候，就已经决定了它的应用场景，硬要整花活可能换来的就是没有市场等等debuff
+ 是的，我对于服务器和服务器的通信、服务器和客户端的通信、客户端和客户端的通信了解甚少（仅限于简易爬虫中的理解）



# 调研内容
## web服务器
+ nginx、apache、tomcat 这三个 可以归为一类，都是服务器.
+ nginx 是轻量级 http服务器和反向代理服务器
+ apache也是http服务器
+ nginx和apache 也都可以作为静态文件服务器来使用
+ tomcat 可以认为是apache 的一个扩展，apache如果要运行java，就需要tomcat的支持，tomcat也可以独立运行。
+ 他们都属于应用服务器

## web框架
+ Django 是 python 的 web 框架
+ Flask 也是 python 的 web 框架
+ Rails 是 Ruby 的 web 框架，和Django性质是一样的
+ 大多数的Web框架提供了一套开发和部署网站的方式，在进行数据缓存、数据库访问、数据安全校验等方面，不需要自己再重新实现，而是将业务逻辑相关的代码写入框架就可以。等等
+ 当然不用web框架来开发网站也是有的，比如用php在apache上开发
+ Java目前的主流开发框架是ssm(spring spring-mvc和mybatis)。相比之前的ssh(spring struts hibernate)，ssm也是比较轻量级的框架

## web界面框架
+ html+css+js直接原生设计界面，但开发成本、上手难度会高一些，需求的频繁变动会大大增加维护成本
+ web界面框架应运而生，比如vue.js，react，jQuery等等


## Node.js

以下内容来自C语言中文网：

+ Javascript 原先只能在浏览器上运行，诞生于1995年，而nodejs诞生于2009年。
+ Node.js 不是一门新的编程语言，也不是一个 JavaScript 框架，它是一套 JavaScript 运行环境，用来支持 JavaScript 代码的执行。用编程术语来讲，Node.js 是一个 JavaScript 运行时（Runtime）
+ 所谓运行时，就是程序在运行期间需要依赖的一系列组件或者工具；把这些工具和组件打包在一起提供给程序员，程序员就能运行自己编写的代码了
+ nodejs的开发团队为了避免其被误认为是 JavaScript 框架，现在也经常简称为 Node
+ Node.js 运行时主要由 V8 引擎、标准库和本地模块组成，尤其是本地模块的多少，从底层决定了 Node.js 功能的强弱
### V8引擎
+ V8 引擎就是 JavaScript 解释器，它负责解析和执行 JavaScript 代码
+ V8 引擎借鉴了 Java 虚拟机和 C++ 编译器的众多技术，它将 JavaScript 代码直接编译成原生机器码，并且使用了缓存机制来提高性能，这使得 JavaScript 的运行速度可以媲美二进制程序

### 本地模块
+ Node.js 集成了众多高性能的开源库，它们使用 C/C++ 语言实现
+ Node.js 直接在计算机上运行 JavaScript 代码，并且要赋予 JavaScript 强大的能力，所以它的本地模块和浏览器中的运行时有很多大区别，甚至说几乎没有什么关联。Node.js 几乎完全抛弃了浏览器，自己从头构建了一套全新的 JavaScript 运行时

### 标准库
+ 本地模块使用 C/C++ 编写，而 Node.js 面向 JavaScript 开发人员，所以必须要封装本地模块的 C/C++ 接口，提供一套优雅的 JavaScript 接口给开发人员，并且要保持接口在不同平台（操作系统）上的一致性
+ 这套 JavaScript 接口，就是 Node.js 标准库。标准库是否优雅和强大，决定了 Node.js 的易用性，直接影响 Node.js 的市场表现

### 小结
+ node.js整合了许多现有的且合适的轮子，集成在了一起并提供JavaScript接口；
+ node.js也编写了自己的模块，典型的代表就是 Libuv，现已开源作为单独的网络库发布；
+ node.js最大的特点是采用了基于事件的、单线程的异步 I/O 架构，这是和其它脚本语言最大的区别；
+ node.js的核心就是V8引擎和Libuv

