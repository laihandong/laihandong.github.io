---
layout: post
title:  "Python打包本地模块"
date:   2022-11-27 20:30:00 +0800
permalink: blog/编程语言/Python/Python打包本地模块.html
typora-root-url: ../../
author: handong
tag1: 编程语言
tag2: Python
---



# python打包发布说明

## 1. 注册账号

pypi.org/account/register



## 2. 明确模块结构

```txt
|-包
|--模块
|--setup.py
```



## 3. 本地打包一个模块

### 3.1 模块结构编写

+ 新建一个文件夹，例如名为`myModule`的文件夹

+ 将自己写的py文件（包括单个py文件、包含多个py文件的子文件夹、甚至嵌套）放到这个文件夹中

+ 并且在同级目录建立一个`setup.py`文件，结构快照示例如下：

  ```txt
  ├─myModule
  │  └─setup.py
  ├─xx1.py
  ├─xx2.py
  └─yyy
     ├─xx3.py
     └─xx4.py
     └─zzz
        └─xxx5.py
  
  ```

+ 编写`setup.py`内容（==重要==）

  ```python
  import setuptools
  
  setuptools.setup(
      name='',	# 这时pip list显示的模块名称
      version='',
      author='',
      author_email='',
      description='',
      platforms='',	# 顾名思义，赋值对应参数关于包的信息
      packages=[''] # 需要一起编译的子包，用.代表层级关系
  )
  ```

+ 比如我的`xx1.py`中的内容如下：

  ```python
  def hello():
      print('Hello world!')
  ```

  

### 3.2 生成模块

+ 打开命令行，将路径跳转到当前模块目录，即myModule下

+ 编译`python setup.py build`

  编译成功的化，myModule下会多出一个build文件夹

+ 生成发布压缩包`python setup.py sdist`

  执行完，myModule下会有一个dist文件夹，其中有一个类似`xxx.tar.gz`格式命名的压缩包

+ 生成网络发布包`python setup.py bdist_wheel`

  执行完，dist文件夹下会有一个和压缩包同名的，但以.whl结尾的文件

+ 本地直接安装`pip install ./dist/test_tool-0.1-py3-none-any.whl`（这个whl的名字以自己本地的为准）

  ```txt
  如果已安装，替换原来的，强制安装：
  pip install ./dist/test_tool-0.1-py3-none-any.whl --force-reinstall
  ```

  

### 3.3 本地测试使用

```python
from testingtools.xx1 import hello

hello()

------------------------------------------------
output:Hello world!
```



## 4. 上传到pypi里面

`twine upload dist/*`

按提示输入你注册的账号信息，等待片刻，登录pypi查看吧
