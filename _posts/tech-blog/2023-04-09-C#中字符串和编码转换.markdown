## 字符串的格式化

方法：String.Format

### 嵌入大括号的处理

1左大括号和右大括号被解释为格式项的开始和结束，如果要在format参数中指定大括号字符，须使用转义序列显示文本左大括号或右大括号。在格式化字符串中这个转义字符还是大括号本身。因此，在固定文本中指定两个左大括号 (“{{”) 以显示一个左大括号 (“{”)，或指定两个右大括号 (“}}”) 以显示一个右大括号 (“}”)。



```c#
string.Format("{{\"data\",{0}}}",student[i].Name);
```



## c#中@的3种作用

**1.忽略转义字符**

```
string fileName = "D:\\文本文件\\text.txt";
```

使用@后

```
string fileName = @"D:\文本文件\text.txt";
```

**2.让字符串跨行**

例如

```sql
string strSQL = "SELECT * FROM HumanResources.Employee AS e"
 + " INNER JOIN Person.Contact AS c"
 + " ON e.ContactID = c.ContactID"
 + " ORDER BY c.LastName";
```

使用@后

```
string strSQL = @"SELECT * FROM HumanResources.Employee AS e
 INNER JOIN Person.Contact AS c
 ON e.ContactID = c.ContactID
 ORDER BY c.LastName";
```

**3.在标识符中的用法**

C#是不允许关键字作为标识符(类名、变量名、方法名、表空间名等)使用的，但如果加上@之后就可以了

例如

```
public static void @static(int @int)
 {
   if (@int > 0)
   {
    System.Console.WriteLine("Positive Integer");
   }
   else if (@int == 0)
   {
    System.Console.WriteLine("Zero");
   }
   else
   {
    System.Console.WriteLine("Negative Integer");
   }
}
```



## C#中处理Unicode编码及转换

​	在C++中，字符有char和wchar之分，相应的，字符串有string和wstring两种。C#中，string是一个unicode字符串，相应的，每个char都是16位。

   源文件中出现的字符串常量，都会被自动转换为unicode编码（utf16），利用Text.Encoding，可以实现不同编码间的转换

```c#
using System;  
using System.Text;  
  
namespace test  
{  
    class Program  
    {  
        static void Main(string[] args)  
        {  
            string u16s = "忘記了啊abc"; //默认的字符编码是unicode,也就是utf16  
  
            //4种编码  
              Encoding utf8 = Encoding.UTF8;  
            Encoding utf16 = Encoding.Unicode;   
            Encoding gb = Encoding.GetEncoding("gbk");   
            Encoding b5 = Encoding.GetEncoding("big5");  
  
            //转换得到4种编码的字节流  
            byte[] u16bytes = utf16.GetBytes(u16s);  
            byte[] u8bytes = Encoding.Convert(utf16, utf8, u16bytes);  
            byte[] gbytes = Encoding.Convert(utf16, gb, u16bytes);  
            byte[] bbytes = Encoding.Convert(utf16, b5, u16bytes);  
  
            Console.Write("unicode: ");  
            foreach (byte c in u16bytes)  
            {  
                Console.Write(((int)c).ToString("x") + " ");  
            }  
            Console.WriteLine();  
  
            Console.Write("utf8: ");  
            foreach(byte c in u8bytes)  
            {  
                Console.Write(((int)c).ToString("x") + " ");  
            }  
            Console.WriteLine();  
  
            Console.Write("gbk: ");  
            foreach (byte c in gbytes)  
            {  
                Console.Write(((int)c).ToString("x") + " ");  
            }  
            Console.WriteLine();  
  
            Console.Write("big5: ");  
            foreach (byte c in bbytes)  
            {  
                Console.Write(((int)c).ToString("x") + " ");  
            }  
            Console.WriteLine();  
  
            //得到4种编码的string  
            string u8s = utf8.GetString(u8bytes);  
            string gs = gb.GetString(gbytes);  
            string bs = b5.GetString(bbytes);  
  
            Console.WriteLine("unicode: " + u16s + " " + u16s.Length.ToString());  
            Console.WriteLine("utf8: " + u8s + " " + u16s.Length.ToString());  
            Console.WriteLine("gbk: " + gs + " " + gs.Length.ToString());  
            Console.WriteLine("big5: " + bs + " " + bs.Length.ToString());  
  
            Console.Write("unicode: ");  
            foreach (char c in u16s)  
            {  
                Console.Write(((int)c).ToString("x") + " ");  
            }  
            Console.WriteLine();  
  
            Console.Write("utf8: ");  
            foreach (char c in u8s)  
            {  
                Console.Write(((int)c).ToString("x") + " ");  
            }  
            Console.WriteLine();  
  
            Console.Write("gb2312: ");  
            foreach (char c in gs)  
            {  
                Console.Write(((int)c).ToString("x") + " ");  
            }  
            Console.WriteLine();  
  
            Console.Write("big5: ");  
            foreach (char c in bs)  
            {  
                Console.Write(((int)c).ToString("x") + " ");  
            }  
            Console.WriteLine();  
  
            Console.ReadKey();  
        }  
    }  
}   
```

