回调函数的逻辑：作为参数传递给调用函数，由调用函数决定如何执行
回调函数的本质：通过函数指针调用的函数

以动态语言python举个例子：

```python
def my_callbcak(args):
    print(*args)

def caller(args, func):
    func(args)

caller((1,2), my_callbcak)
```
## 常见的设计

### 携带额外信息
通过回调函数，显示调用函数中的特定信息

```python
def caller(func, args, callback):
    result = func(*args)
    callback(result)

def add(x, y):
    return x + y

def print_result(result):
    print(result)

caller(add, (2, 3), callback=print_result)
```

### 访问外部信息
方法一：同归属一个类
```python
def caller(func, args, [*,] callback):
    result = func(*args)
    callback(result)

def add(x ,y):
    return x + y

class ResultHandler(object):
    def __init__(self):
        self.sequence = 0

    def handle(self, result):
        self.sequence += 1
        print("[{}] Got: {}".format(self.sequence, result))

r = ResultHandler()
caller(add, (2,3), callback=r.handle)
```

方法二：同归属于闭包
```python
def caller(func, args, [*,] callback):
    result = func(*args)
    callback(result)

def add(x ,y):
    return x + y

def make_handler():
    sequence = 0
    def handler(result):
        nonlocal sequence
        sequence += 1
        print("[{}] Got:{}".format(sequence, result))
    return handler

handler = make_handler()
caller(add, (2,3), callback=handler)
```
