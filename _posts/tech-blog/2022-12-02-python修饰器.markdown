---
layout: single
title:  "修饰器"
tags: 编程语言 Python 修饰器
---



# 在函数中定义函数

python是可以在函数内定义函数的，虽然不能在外部调用，但可以在函数内调用，举个例子。

```python
def hi(name):
    print("hi, my name is {}".format(name))
    
    def greet():
        print("welcome!")
        
    greet()  # 调用函数内的函数
    
    print("inner func greet 被调用了，func 也执行完了")
```


# 从函数中返回函数
同理，函数也可以返回函数，虽然返回的是函数地址，但可以接()运行函数，举个例子
```python
def hi(name):
    print("hi, my name is {}".format(name))
    
    def result():
        return "I'm the inner func in func hi"
        
    return result
    
rst = hi()
print(rst)  # <function result at 0x??????> 返回一个函数地址
print(rst())  # 执行函数，输出 I'm the inner func in func hi
```

# 将函数作为参数传给另一个函数
再同理，也可以将函数作为参数传给函数，举个例子
```python
def hi():
        return "hello!"
        
def say_hi(func):
    func()  # 执行传进来的函数
    print("hi again!")
    
say_hi(hi)
# 输出：hello!
       hi again!
```


在理解上面的基础上，写下第一个修饰器吧（提示：有两种写法）
```python
def decorator_func(func):
    def wrap_func():
        print("I'm wrapping the func")
        func()
        print("I've done")
        
    return wrap_func()
def my_func():
    print("wrap me!")
    
# 写法一
my_func = decorator_func(my_func)
my_func()

# 写法二
@decorator_func
def my_func():
    print("wrap me!")
    
my_func()

# 两种写法的输出是一样的，本质也是一样的
```


# 避免函数名和注释文档被覆盖
但由此会产生一个问题，就是原函数的名字、注释文档会被修饰函数的替换掉
```python
from functools import wraps

def decorator_func(func):
    @wraps(func)  # 在这加上这一行，这样就可以避免func被修饰函数给覆盖掉名字和注释文档
    def wrap_func():
        print("I'm wrapping the func")
        func()
        print("I've done")
        
        
print(my_func.__name__)  #可以尝试下输出我的函数的名字，加上那句话与否，结果是不一样的
```


# 带参数的装饰器
另一个进阶的问题，即使是修饰器本身也是一个函数，也可以有参数，即带参数的修饰器函数，举个例子

```python
def log_it(file='log.txt'):
    def logging_decorator(func):
        @wraps(func)
        def wrap(*args, **kwargs):
            print("{} was called".format(func.__name__)
            # 打开file，写日志（省略）
            return func(*args,**kwargs)
        return wrap
    return logging_decorator
    
@log_it
def my_func():
    pass
    
    
# 默认调用
my_func()

#
@log_it(file='log2.txt')
def my_func2():
    pass

my_func2()
```

# 修饰器类
再进阶的方法是**修饰器类**，既可以使代码更简洁，也可以拓展修饰函数的功能,举个例子
```python
from functools import wraps

class log_it(object):
    def __init__(self, file='log.txt'):
        self.file = file
    
    def __call__(self, func):
        @wraps(func)
        def wrap(*args, **kwargs):
            print("{} was called".format(func.__name__)
            # 打开file，写日志（省略）
            self.send_log()  # 可能会用到的待拓展的功能，比如把日志打包发给别人
            return func(*args,**kwargs)
        return wrap
        
    def send_log(self):
        # log_it只是打印日志，不做别的。这个函数为了继承而准备
        pass
        
@log_it()  # 这里有些细微的变化
def my_func():
    pass
    
    
    
# 继承打印日志的修饰器类，新增发送日志功能
class send_out_log(log_it):
    def __init__(self, email='admin', *args, **kwargs):
        self.email = email
        super(send_out_log, self).__init__(*args, **kwargs)
        
    def send_log(self):
        pass  # 具体细节就省略了，不做实现了，领悟到意思即可
```